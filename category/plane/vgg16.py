import numpy as np
import tensorflow as tf
from sklearn.metrics import confusion_matrix
from lib import output_metrix_from_matrix

"""
Dataset
"""
train_data_dir = '/content/4096/300/TRAIN/'
test_data_dir = '/content/4096/300/TEST/'

classes = ["Adposhel", "Allaple", "Amonetize", "AutoRun", "BrowseFox", "Dinwod", "InstallCore", "MultiPlug", "Other", "VBA", "Vilsel"]
class_num = len(classes)

train_ds = tf.keras.utils.image_dataset_from_directory(
  train_data_dir,
  seed=123,
  color_mode='rgb',
  batch_size=32,
  image_size=(256, 256),
)

test_ds = tf.keras.utils.image_dataset_from_directory(
  test_data_dir,
  labels='inferred',
  # label_mode='categorical',
  label_mode='int',
  seed=123,
  color_mode='rgb',
  batch_size=32,
  image_size=(256, 256),
)

def preprocess_ds(images, labels):
  return tf.keras.applications.vgg16.preprocess_input(images), labels
train_ds = train_ds.map(preprocess_ds)
test_ds = test_ds.map(preprocess_ds)

"""
Model
"""
base_model = tf.keras.applications.VGG16(weights='imagenet',
  include_top=False, input_shape=(256, 256, 3),
)
base_model.trainable=False

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Rescaling(1.0/255, input_shape=(256, 256, 3))),
model.add(base_model)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(11, activation='softmax'))
model.summary()

"""
Learning
"""
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(
  train_ds,
  epochs=5,
)

"""
Prediction
"""
y_pred = model.predict(test_ds).argmax(axis=1)
y_pred = y_pred.astype(int)

y_true = np.array([])
# y_true = np.empty((0, 11))
for images, labels in test_ds:
    y_true = np.concatenate((y_true, labels))
# y_true = np.argmax(y_true, axis=1)

for i in range(20):
    print(y_true[i], y_pred[i])
matrix = confusion_matrix(y_true, y_pred)
output_metrix_from_matrix(matrix=matrix, class_num=class_num)
