import numpy as np
import tensorflow as tf
from sklearn.metrics import confusion_matrix

"""
Dataset
"""
train_data_dir = '/content/4096/300/TRAIN/'
test_data_dir = '/content/4096/300/TEST/'

classes = ["Adposhel", "Allaple", "Amonetize", "AutoRun", "BrowseFox", "Dinwod", "InstallCore", "MultiPlug", "Other", "VBA", "Vilsel"]
class_num = len(classes)

train_ds = tf.keras.utils.image_dataset_from_directory(
  train_data_dir,
  seed=123,
  color_mode='rgb',
  batch_size=32,
  image_size=(256, 256),
)

test_ds = tf.keras.utils.image_dataset_from_directory(
  test_data_dir,
  labels='inferred',
  label_mode='categorical',
  seed=123,
  color_mode='rgb',
  batch_size=32,
  image_size=(256, 256),
)

def preprocess_ds(images, labels):
  return tf.keras.applications.vgg16.preprocess_input(images), labels
train_ds = train_ds.map(preprocess_ds)
test_ds = test_ds.map(preprocess_ds)

"""
Model
"""
base_model = tf.keras.applications.VGG16(weights='imagenet',
  include_top=False, input_shape=(256, 256, 3),
)
base_model.trainable=False

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Rescaling(1.0/255, input_shape=(256, 256, 3))),
model.add(base_model)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(11, activation='softmax'))
model.summary()

"""
Learning
"""
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

model.fit(
  train_ds,
  epochs=2,
)

"""
Prediction
"""
y_pred = model.predict(test_ds).argmax(axis=1)
# print(y_pred.shape) => (861, 11)
print(y_pred[0])

y_true = np.empty((0, 11))
for images, labels in test_ds:
    y_true = np.concatenate((y_true, labels))
# print(y_true.shape) => (861, 11)

matrix = confusion_matrix(y_true, y_pred)
print(matrix)

# y_pred = model.predict(test_ds).argmax(axis=1)
#
# matrix = confusion_matrix(y_test, y_pred)
# # print(matrix)
#
# TP, FP, TN, FN = disassemble_confusion_matrix(matrix=matrix)
#
# TPs = sum(TP)
# accuracy = TPs / sum(list(map(sum, zip(*matrix))))
#
# precision = list()
# for i in range(class_num):
#   precision.append(TP[i] / (TP[i] + FP[i]))
#
# recall = list()
# for i in range(class_num):
#   recall.append(TP[i] / (TP[i] + FN[i]))
#
# f1_score = list()
# for i in range(class_num):
#   f1_score.append((2 * precision[i] * recall[i]) / (precision[i] + recall[i]))
#
# fpr = list()
# for i in range(class_num):
#   fpr.append(FP[i] / (FP[i] + TN[i]))
#
# print('Accuracy: ', accuracy)
# print('Precision: ', np.nansum(precision) / class_num)
# print('Recall: ', np.nansum(recall) / class_num)
# print('F1-Score: ', np.nansum(f1_score) / class_num)
# print('FPR: ', np.nansum(fpr) / class_num)
