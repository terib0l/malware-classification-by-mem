import glob
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split


BINARY_LABELS = ["Malware", "Benign"]
CATEGORY_LABELS = [
    "Adposhel", "Allaple", "Amonetize", "AutoRun",
    "BrowseFox", "Dinwod", "InstallCore", "MultiPlug",
    "Other", "VBA", "Vilsel"
]
UNKNOWN_MALWARE_LABELS = [
    ["MultiPlug", "VBA", "Vilsel"],
    ["BrowseFox", "Dinwod", "InstallCore"],
    ["Adposhel", "Allaple", "Amonetize"]
]

class DumpwarePreparation:
    def __init__(
            self,
            data_dir: list = [
                '/content/4096/300/TRAIN/',
                '/content/4096/300/TEST/'
            ],
            labels_num = 11,
            model_name = "vgg16"
        ):
        self.data_dir = data_dir
        self.labels_num = labels_num
        self.model_name = model_name


    def preprocess_func(self):
        if self.model_name == "vgg16":
            return tf.keras.applications.vgg16.preprocess_input
        elif self.model_name == "vgg19":
            return tf.keras.applications.vgg19.preprocess_input
        elif self.model_name == "resnet50":
            return tf.keras.applications.resnet50.preprocess_input
        elif self.model_name == "xception":
            return tf.keras.applications.xception.preprocess_input
        elif self.model_name == "inception_v3":
            return tf.keras.applications.inception_v3.preprocess_input
        elif self.model_name == "mobilenet_v3":
            return tf.keras.applications.mobilenet_v3.preprocess_input

        return lambda x: x
            

    def prepare_dumpware10_for_category(self):
        temp_x = []
        temp_y = []

        for dir_path in self.data_dir:
            for label_num, label in enumerate(CATEGORY_LABELS):
                label_dir_path = dir_path + label
                png_paths = glob.glob(label_dir_path + "/*.png")

                for png_path in png_paths:
                    png = tf.keras.preprocessing.image.load_img(
                        path=png_path,
                        color_mode='rgb',
                        target_size=(256, 256),
                        interpolation='bicubic'
                    )
                    png = tf.keras.preprocessing.image.img_to_array(png)
                    png = self.preprocess_func()(png)

                    temp_x.append(png)
                    temp_y.append(label_num)

        temp_x = np.array(temp_x) / 255
        temp_y = np.array(temp_y)

        '''
        self.x_train, self.x_test, self.y_train, self.y_test = \
        train_test_split(temp_x, temp_y, test_size=0.2, shuffle=True)

        del temp_x, temp_y

        return self.x_train, self.x_test, self.y_train, self.y_test
        '''
        return train_test_split(temp_x, temp_y, test_size=0.2, shuffle=True)


    def prepare_dumpware10_for_binary(self, fold: int):
        temp_mx = []
        temp_my = []
        temp_bx = []
        temp_by = []
        temp_ux = []
        temp_uy = []
        UNKNOWS = UNKNOWN_MALWARE_LABELS[fold-1]

        for dir_path in self.data_dir:
            for label in CATEGORY_LABELS:
                label_dir_path = dir_path + label
                png_paths = glob.glob(label_dir_path + "/*.png")

                for png_path in png_paths:
                    png = tf.keras.preprocessing.image.load_img(
                        path=png_path,
                        color_mode='rgb',
                        target_size=(256, 256),
                        interpolation='bicubic'
                    )
                    png = tf.keras.preprocessing.image.img_to_array(png)
                    png = self.preprocess_func()(png)

                    if label == "Other":
                        temp_bx.append(png)
                        temp_by.append(0)
                    elif label in UNKNOWS:
                        temp_ux.append(png)
                        temp_uy.append(1)
                    else:
                        temp_mx.append(png)
                        temp_my.append(1)

        temp_bx = np.array(temp_bx) / 255
        temp_by = np.array(temp_by)
        temp_ux = np.array(temp_ux) / 255
        temp_uy = np.array(temp_uy)
        temp_mx = np.array(temp_mx) / 255
        temp_my = np.array(temp_my)

        train_bx, test_bx, train_by, test_by = \
        train_test_split(
            temp_bx, temp_by,
            train_size=(len(temp_my)/3686),
            test_size=(len(temp_uy)/3686),
            shuffle=True
        )
        del temp_bx, temp_by

        '''
        self.x_train = np.concatenate([train_bx, temp_mx])
        self.x_test = np.concatenate([test_bx, temp_ux])
        self.y_train = np.concatenate([train_by, temp_my])
        self.y_test = np.concatenate([test_by, temp_uy])
        del temp_ux, temp_uy, temp_mx, temp_my, \
            train_bx, test_bx, train_by, test_by

        return self.x_train, self.x_test, self.y_train, self.y_test
        '''
        return np.concatenate([train_bx, temp_mx]), np.concatenate([test_bx, temp_ux]), \
                np.concatenate([train_by, temp_my]), np.concatenate([test_by, temp_uy])

