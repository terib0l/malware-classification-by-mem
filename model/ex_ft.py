import tensorflow as tf
from model.basic import BasicModel


class FineTuning(BasicModel):
    def print_trainables(self, model):
        for layer in model.layers:
            print(layer.name, layer.trainable)


    def choose_convolutional_model(self):
        _, h, w, d = self.x_train.shape
        if self.convolutional_model == "vgg16":
            print("""
                    VGG16
            """)
            base_model = tf.keras.applications.VGG16(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )
            # In addition to implement Fine-tuning
            base_model.trainable = True
            for i, layer in enumerate(base_model.layers):
                if i < 4: # 4, 7, 11, 15
                    layer.trainable = False
            self.print_trainables(base_model)


        elif self.convolutional_model == "vgg19":
            print("""
                    VGG19
            """)
            base_model = tf.keras.applications.VGG19(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "resnet152":
            print("""
                    ResNet152
            """)
            base_model = tf.keras.applications.ResNet152(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "densenet201":
            print("""
                    DenseNet201
            """)
            base_model = tf.keras.applications.DenseNet201(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "xception":
            print("""
                    Xception
            """)
            base_model = tf.keras.applications.Xception(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "inception_v3":
            print("""
                    InceptionV3
            """)
            base_model = tf.keras.applications.InceptionV3(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "small_mobilenet_v3":
            print("""
                    MobileNetV3 Small
            """)
            base_model = tf.keras.applications.MobileNetV3Small(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        elif self.convolutional_model == "large_mobilenet_v3":
            print("""
                    MobileNetV3 Large
            """)
            base_model = tf.keras.applications.MobileNetV3Large(
                weights='imagenet',
                include_top=False,
                input_shape=(h, w, d)
            )

        else:
            raise Exception("No Pretrained Model")

        return base_model


    def binary_case_basic_flow(self):
        base_model = self.choose_convolutional_model()

        model = tf.keras.models.Sequential()
        model.add(base_model)
        model.add(tf.keras.layers.Flatten())
        model.add(tf.keras.layers.Dense(64, activation='relu'))
        model.add(tf.keras.layers.Dropout(0.5))
        model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
        model.summary()

        model.compile(
            optimizer='adam',
            # optimizer = tf.keras.optimizers.RMSprop(
            #     learning_rate=1e-5,
            #     # learning_rate=0.001, rho=0.9, epsilon=None, decay=0.0
            # ),
            loss='binary_crossentropy',
            metrics=[
                tf.keras.metrics.BinaryAccuracy(name='accuracy'),
                tf.keras.metrics.Precision(name='precision'),
                tf.keras.metrics.Recall(name='recall'),
            ]
        )

        model.fit(
            x=self.x_train,
            y=self.y_train,
            batch_size=32,
            epochs=10,
            callbacks=[
                tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
            ],
            verbose='auto'
        )
        y_pred = model.predict(self.x_test).argmax(axis=1)
        return y_pred
        # return model


    def category_case_basic_flow(self):
        base_model = self.choose_convolutional_model()

        model = tf.keras.models.Sequential()
        model.add(base_model)
        model.add(tf.keras.layers.Flatten())
        model.add(tf.keras.layers.Dense(64, activation='relu'))
        model.add(tf.keras.layers.Dropout(0.5))
        model.add(tf.keras.layers.Dense(11, activation='softmax'))
        model.summary()

        model.compile(
            # optimizer='adam',
            optimizer = tf.keras.optimizers.RMSprop(
                learning_rate=1e-5,
                # learning_rate=0.001, rho=0.9, epsilon=None, decay=0.0
            ),
            loss='sparse_categorical_crossentropy',
            metrics=['accuracy']
        )

        model.fit(
            x=self.x_train,
            y=self.y_train,
            batch_size=32,
            epochs=50,
            callbacks=[
                tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
            ],
            verbose='auto'
        )
        y_pred = model.predict(self.x_test).argmax(axis=1)
        return y_pred

