import umap
from model.base import BaseModel

class SupervisedUMAP(BasicModel):
    def transfer_flow(self):
        """
        Parameter Explore
            - n_components: (4, 5, 10, 25, 50, 100)
            - min_dist: [0.15:1:0.05]
            - n_neighbors: [5:100:5]
            - metric: (Euclidean, Manhattan, Chebyshev, Cosine, Jaccard, Dice)
        """
        base_model = self.choose_convolutional_model()

        bf_train = base_model.predict(self.x_train)
        bf_train = bf_train.reshape(bf_train.shape[0], -1)
        bf_test = base_model.predict(self.x_test)
        bf_test = bf_test.reshape(bf_test.shape[0], -1)
        print("\nBottleneck Features:\nbf_train: {}\nbf_test: {}\n".format(bf_train.shape, bf_test.shape))

        _umap = umap.UMAP(
            n_components=4,
            min_dist=1,
            n_neighbors=55,
            metric='manhattan',
            random_state=4,
        )
        bf_train = _umap.fit_transform(X=bf_train, y=self.y_train)
        bf_test = _umap.transform(X=bf_test)
        print(
            "\nBottleneck Features applied UMAP:\n"
            "bf_train: {}\nbf_test: {}\n".format(
                bf_train.shape, bf_test.shape
            )
        )

        clf = self.choose_ml_classifier(bf_train)

        clf.fit(bf_train, self.y_train)
        y_pred = clf.predict(bf_test)

        del bf_train, bf_test

        return y_pred

