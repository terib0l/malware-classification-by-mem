import tensorflow as tf
from model.basic import BasicModel


def vgg16_implemented(model) -> tf.keras.models.Model:
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def vgg19_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def resnet_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def densenet_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def xception_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def inception_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


class BottleNeck(BasicModel):
    def choose_convolutional_model(self):
        if self.convolutional_model == "vgg16":
            print("""
                    VGG16
            """)
            base_model = tf.keras.applications.VGG16(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "vgg19":
            print("""
                    VGG19
            """)
            base_model = tf.keras.applications.VGG19(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "resnet152":
            print("""
                    ResNet152
            """)
            base_model = tf.keras.applications.ResNet152(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "densenet201":
            print("""
                    DenseNet201
            """)
            base_model = tf.keras.applications.DenseNet201(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "xception":
            print("""
                    Xception
            """)
            base_model = tf.keras.applications.Xception(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "inception_v3":
            print("""
                    InceptionV3
            """)
            base_model = tf.keras.applications.InceptionV3(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "small_mobilenet_v3":
            print("""
                    MobileNetV3 Small
            """)
            base_model = tf.keras.applications.MobileNetV3Small(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        elif self.convolutional_model == "large_mobilenet_v3":
            print("""
                    MobileNetV3 Large
            """)
            base_model = tf.keras.applications.MobileNetV3Large(
                weights='imagenet',
                include_top=False,
                input_shape=(224, 224, 3)
            )

        else:
            raise Exception("No Pretrained Model")

        base_model.trainable=False

        return base_model


    def transfer_flow(self):
        conv_base = self.choose_convolutional_model()

        if self.convolutional_model == "vgg16":
            model = vgg16_implemented(conv_base)
        elif self.convolutional_model == "vgg19":
            model = vgg19_implemented(conv_base)
        elif self.convolutional_model == "resnet152":
            model = resnet_implemented(conv_base)
        elif self.convolutional_model == "densenet201":
            model = densenet_implemented(conv_base)
        elif self.convolutional_model == "xception":
            model = xception_implemented(conv_base)
        elif self.convolutional_model == "inception_v3":
            model = inception_implemented(conv_base)
        else:
            raise NotImplementedError

        model.summary()

        bf_train = model.predict(self.x_train)
        bf_train = bf_train.reshape(bf_train.shape[0], -1)
        bf_test = model.predict(self.x_test)
        bf_test = bf_test.reshape(bf_test.shape[0], -1)
        print("\nBottleneck Features:\nbf_train: {}\nbf_test: {}\n".format(bf_train.shape, bf_test.shape))

        del model
        return bf_train, bf_test

