import numpy as np
import tensorflow as tf
from xgboost import XGBClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV
from module.schema import PretrainedModel, ClassifyModel

class PlainModel:
    def __init__(
        self,
        x_train,
        y_train,
        x_test,
        convolutional_model: PretrainedModel = PretrainedModel.VGG16,
        classify_func: ClassifyModel = ClassifyModel.FCN
    ):
        self.x_train=x_train
        self.y_train=y_train
        self.x_test=x_test
        self.convolutional_model = convolutional_model
        self.classify_func = classify_func


    def flow_execute(self):
        if self.classify_func == "fcn":
            return self.basic_flow()
        else:
            return self.transfer_flow()


    def choose_convolutional_model(self):
        if self.convolutional_model == "vgg16":
            base_model = tf.keras.applications.VGG16(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        elif self.convolutional_model == "vgg19":
            base_model = tf.keras.applications.VGG19(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        elif self.convolutional_model == "resnet50":
            base_model = tf.keras.applications.ResNet50(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        elif self.convolutional_model == "xception":
            base_model = tf.keras.applications.Xception(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        elif self.convolutional_model == "inception_v3":
            base_model = tf.keras.applications.InceptionV3(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        elif self.convolutional_model == "mobilenet_v3":
            base_model = tf.keras.applications.MobilenetV3(
                weights='imagenet',
                include_top=False,
                input_shape=(256, 256, 3)
            )

        else:
            raise Exception("No Pretrained Model")

        base_model.trainable=False

        return base_model


    def basic_flow(self):
        base_model = self.choose_convolutional_model()

        model = tf.keras.models.Sequential()
        model.add(base_model)
        model.add(tf.keras.layers.Flatten())
        model.add(tf.keras.layers.Dense(64, activation='relu'))
        model.add(tf.keras.layers.Dense(2, activation='sigmoid'))
        model.summary()

        model.compile(
            optimizer='adam',
            loss='binary_crossentropy',
            metrics=['accuracy']
        )

        model.fit(
            x=self.x_train,
            y=self.y_train,
            batch_size=32,
            epochs=50,
            callbacks=[
                tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
            ],
            verbose='auto'
        )
        y_pred = model.predict(self.x_test).argmax(axis=1)

        return y_pred


    def choose_ml_classifier(self, bf_train):
        if self.classify_func == "svm":
            grid = GridSearchCV(
                estimator=SVC,
                param_grid = {
                    "C": np.arange(0.01, 10000000000, 10),
                    "gamma": np.arange(0.000000001, 1000, 10)
                },
                scoring="accuracy"
            )
            grid.fit(bf_train, self.y_train)

            clf = SVC(
                C = grid.best_params_["C"],
                gamma = grid.best_params_["gamma"],
            )

        elif self.classify_func == "rf":
            grid = GridSearchCV(
                estimator=RandomForestClassifier,
                param_grid = {
                    "n_estimators": [10, 20, 30, 50, 100, 300],
                    "max_features": ('sqrt', 'log2', 'auto', None),
                    "max_depth": (10, 20, 30, 40, 50, None),
                },
                scoring="accuracy"
            )
            grid.fit(bf_train, self.y_train)

            clf = RandomForestClassifier(
                n_estimators = grid.best_params_["n_estimators"],
                max_features = grid.best_params_["max_features"],
                max_depth = grid.best_params_["max_depth"],
                criterion="gini",
                min_samples_leaf=1,
                random_state=0,
            )

        elif self.classify_func == "knn":
            grid = GridSearchCV(
                estimator=KNeighborsClassifier,
                param_grid = {
                    "n_neighbors": [3, 5, 11, 19, 25, 30],
                    "weights": ['uniform', 'distance'],
                    "metric": ['euclidean', 'manhattan'],
                },
                scoring="accuracy"
            )
            grid.fit(bf_train, self.y_train)

            clf = KNeighborsClassifier(
                n_neighbors = grid.best_params_["n_neighbors"],
                weights = grid.best_params_["weights"],
                metric = grid.best_params_["metric"],
            )

        elif self.classify_func == "j48":
            grid = GridSearchCV(
                estimator=DecisionTreeClassifier(random_state=1024),
                param_grid = {
                    'max_features': ['auto', 'sqrt', 'log2'],
                    'ccp_alpha': [0.1, 0.01, 0.001],
                    'max_depth' : [5, 6, 7, 8, 9],
                    'criterion' :['gini', 'entropy']
                },
                scoring="accuracy"
            )
            grid.fit(bf_train, self.y_train)

            clf = DecisionTreeClassifier(
                max_features = grid.best_params_["max_features"],
                ccp_alpha = grid.best_params_["ccp_alpha"],
                max_depth = grid.best_params_["max_depth"],
                criterion = grid.best_params_["criterion"],
            )

        elif self.classify_func == "xgboost":
            grid = GridSearchCV(
                estimator=XGBClassifier,
                param_grid = {
                    "max_depth": [2, 4, 6],
                    "n_estimators": [50, 100, 200],
                },
                scoring="accuracy"
            )
            grid.fit(bf_train, self.y_train)

            clf = XGBClassifier(
                max_depth = grid.best_params_["max_depth"],
                n_estimators = grid.best_params_["n_estimators"],
            )

        else:
            raise Exception("No Clf Model")

        return clf


    def transfer_flow(self):
        base_model = self.choose_convolutional_model()

        bf_train = base_model.predict(self.x_train)
        bf_train = bf_train.reshape(bf_train.shape[0], -1)
        bf_test = base_model.predict(self.x_test)
        bf_test = bf_test.reshape(bf_test.shape[0], -1)

        clf = self.choose_ml_classifier(bf_train)

        clf.fit(bf_train, self.y_train)
        y_pred = clf.predict(bf_test)

        return y_pred

