import tensorflow as tf
from category.lib import DumpwarePreparation, output_metrix_from_matrix


"""
Dataset
"""
dataset = DumpwarePreparation()
x_train, x_test, y_train, y_test = dataset.prepare_dumpware10_for_category()
dataset.summary()

"""
Model
"""
base_model = tf.keras.applications.VGG16(
    weights='imagenet',
    include_top=False,
    input_shape=(256, 256, 3)
)
base_model.trainable=False

# sample1
model = tf.keras.models.Sequential()
model.add(base_model)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(11, activation='softmax'))
#
# sample2
# model = tf.keras.models.Sequential()
# model.add(base_model)
# model.add(tf.keras.layers.Flatten())
# model.add(tf.keras.layers.Dense(1024, activation='relu'))
# model.add(tf.keras.layers.Dense(1024, activation='relu'))
# model.add(tf.keras.layers.Dense(11, activation='softmax'))
#
# sample3
# model = tf.keras.models.Sequential()
# model.add(base_model)
# model.add(tf.keras.layers.GlobalAveragePooling2D())
# model.add(tf.keras.layers.Dropout(0.5))
# model.add(tf.keras.layers.Dense(11, activation='softmax'))

model.summary()


"""
Learning
"""
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(
    x=x_train,
    y=y_train,
    batch_size=32,
    epochs=1,
    verbose='auto'
)

"""
Prediction
"""
y_pred = model.predict(x_test).argmax(axis=1)
output_metrix_from_matrix(y_test=y_test, y_pred=y_pred, labels_num=11)
