import argparse
from sklearn.metrics import classification_report
from module.dataset import DumpwarePreparation
from module.metrix import output_metrix_from_matrix
from module.schema import (
    CaseLabel,
    PretrainedModel,
    ClassifyModel,
    # Attention
)
from model.plane import PlainModel
from model.ex_umap import SupervisedUMAP


def main(parse_args):
    print(parse_args)

    # Dataset Preparation
    dataset = DumpwarePreparation(
        # data_dir=[
        #     '/content/4096/300/TRAIN/',
        #     '/content/4096/300/TEST/'
        # ],
        case_label=parse_args.case,
        model_name=parse_args.model
    )
    if parse_args.case == CaseLabel.CATEGORY:
        x_train, x_test, y_train, y_test = dataset.prepare_dumpware10_for_category()
    else:  # parse_args.case == CaseLabel.BINARY:
        x_train, x_test, y_train, y_test = dataset.prepare_dumpware10_for_binary(parse_args.fold)
    print(
        x_train.shape,
        x_test.shape,
        y_test[:10],
        y_train.shape,
        y_test.shape,
        y_test[:10],
        sep='\n'
    )

    # Model Preparation
    model = PlainModel(
        x_train=x_train,
        y_train=y_train,
        x_test=x_test,
        convolutional_model=parse_args.model,
        classify_func=parse_args.classify,
        problem_case=parse_args.case
    )

    # Learning & Prediction
    if parse_args.case == CaseLabel.CATEGORY:
        y_pred = model.flow_execute()
        output_metrix_from_matrix(y_test=y_test, y_pred=y_pred, labels_num=parse_args.n)
    else:
        if parse_args.classify == "fcn":
            trained_model = model.flow_execute()
            result = trained_model.evaluate(x_test, y_test, batch_size=32, verbose=0)
            for name, value in zip(trained_model.metrics_names, result):
                print(name, ': ', value)
            f1_score = 2*result[2]*result[3] / (result[2]+result[3])
            print('f1-score: ', f1_score)

        else:  # svm, rf, knn, j48, xgboost
            if parse_args.umap:
                model = SupervisedUMAP(
                    x_train=x_train,
                    y_train=y_train,
                    x_test=x_test,
                    convolutional_model=parse_args.model,
                    classify_func=parse_args.classify,
                    problem_case=parse_args.case
                )
            y_pred = model.flow_execute()
            print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware']))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("-m", "--model", nargs="?", type=str, default="vgg16", choices=[ e.value for e in PretrainedModel ])
    parser.add_argument("-c", "--classify", nargs="?", type=str, default="fcn", choices=[ e.value for e in ClassifyModel ])
    # parser.add_argument("-a", nargs="?", type=str, default=None, choices=[ e.value for e in Attention ])

    case_parser = parser.add_subparsers(dest='case')
    binary_case = case_parser.add_parser('binary')
    binary_case.add_argument('--fold', nargs="?", type=int, default=1, choices=[1, 2, 3])
    binary_case.add_argument('--umap', action='store_true')
    category_case = case_parser.add_parser('category')

    main(parser.parse_args())
