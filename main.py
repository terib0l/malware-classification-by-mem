import warnings
import argparse
from sklearn.metrics import classification_report
from module.dataset import dataset_operation
from module.metrix import output_metrix_from_matrix
from module.schema import (
    CaseLabel,
    PretrainedModel,
    ClassifyModel,
    AdditionalMechanism,
)
from model.base import BaseModel
from model.fine_tuning import FineTuning
from model.sparse_attention import DynamicSpatialAttention
# from model.ex_cbam import CbamAttention
# from model.ex_umap import SupervisedUMAP

warnings.filterwarnings("ignore")


def basic(parse_args, x_train, y_train, x_test, y_test):
    """
    Model Preparation
    """
    model = BaseModel(
        x_train=x_train,
        y_train=y_train,
        x_test=x_test,
        parse_args=parse_args,
    )

    """
    Learning & Prediction
    """
    if parse_args.case == CaseLabel.CATEGORY:
        y_pred = model.flow_execute()
        output_metrix_from_matrix(y_test=y_test, y_pred=y_pred)
    else:
        y_pred = model.flow_execute()
        print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware'], digits=4))


def fine_tuning(parse_args, x_train, y_train, x_test, y_test):
    """
    Model Preparation
    """
    model = FineTuning(
        x_train=x_train,
        y_train=y_train,
        x_test=x_test,
        parse_args=parse_args,
    )

    """
    Learning & Prediction
    """
    if parse_args.classify == "fcn":
        if parse_args.case == CaseLabel.CATEGORY:
            y_pred = model.flow_execute()
            output_metrix_from_matrix(y_test=y_test, y_pred=y_pred)
        else:
            y_pred = model.flow_execute()
            print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware'], digits=4))

    else:  # svm, svc, rf, knn, j48, xgboost
        raise NotImplementedError


def spatial(parse_args, x_train, y_train, x_test, y_test):
    """
    Model Preparation
    """
    model = DynamicSpatialAttention(
        x_train=x_train,
        y_train=y_train,
        x_test=x_test,
        parse_args=parse_args,
    )

    """
    Learning & Prediction
    """
    if parse_args.case == CaseLabel.CATEGORY:
        # fcn
        if parse_args.classify == "fcn":
            y_pred = model.flow_execute()
            output_metrix_from_matrix(y_test=y_test, y_pred=y_pred)
        # svm, rf, knn, j48, xgboost
        else:  
            bf_train, bf_test = model.flow_execute()
            for clf_name in ["svm", "svc", "rf", "knn", "j48", "xgboost"]:
                model.classify_func = clf_name
                clf = model.choose_ml_classifier()
                clf.fit(bf_train, y_train)
                y_pred = clf.predict(bf_test)
                output_metrix_from_matrix(y_test=y_test, y_pred=y_pred)
            del bf_train, bf_test

    else:
        # fcn
        if parse_args.classify == "fcn":
            y_pred = model.flow_execute()
            print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware']))
        # svm, rf, knn, j48, xgboost
        else:  
            bf_train, bf_test = model.flow_execute()
            for clf_name in ["svm", "svc", "rf", "knn", "j48", "xgboost"]:
                model.classify_func = clf_name
                clf = model.choose_ml_classifier()
                clf.fit(bf_train, y_train)
                y_pred = clf.predict(bf_test)
                print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware'], digits=4))
            del bf_train, bf_test


def main(parse_args):
    print(parse_args)

    x_train, y_train, x_test, y_test = dataset_operation(parse_args)

    if parse_args.addition == "spatial":
        spatial(parse_args, x_train, y_train, x_test, y_test)
    elif parse_args.addition == "tuning":
        fine_tuning(parse_args, x_train, y_train, x_test, y_test)
    else:
        basic(parse_args, x_train, y_train, x_test, y_test)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("-s", "--size", nargs="?", type=int, default=300, choices=[224, 300])
    parser.add_argument("-m", "--model", nargs="?", type=str, default="vgg16", choices=[ e.value for e in PretrainedModel ])
    parser.add_argument("-c", "--classify", nargs="?", type=str, default="fcn", choices=[ e.value for e in ClassifyModel ])
    parser.add_argument("-l", "--last-layer", nargs="?", type=str, default="flatten", choices=[ "flatten", "gap" ])
    parser.add_argument("-a", "--addition", nargs="?", type=str, default=None, choices=[ e.value for e in AdditionalMechanism ])

    case_parser = parser.add_subparsers(dest='case')

    """
    Binary Case
    """
    binary_case = case_parser.add_parser('binary')
    binary_case.add_argument("-f", "--fold", nargs="?", type=int, default=1, choices=[1, 2, 3])
    binary_case.add_argument("-ag", "--augmentation", action="store_true")
    binary_case.add_argument("-cs", "--cost-sensitive", action="store_true")
    # binary_case.add_argument("-u", "--umap", action="store_true")

    """
    11-Category Case
    """
    category_case = case_parser.add_parser('category')

    main(parser.parse_args())
