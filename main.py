import argparse
from model.category import PlainModel
from module.dataset import DumpwarePreparation
from module.metrix import output_metrix_from_matrix
from module.schema import LabelsNum, PretrainedModel, ClassifyModel

parser = argparse.ArgumentParser()
parser.add_argument("-n", nargs="?", type=int, default=11, choices=[ e.value for e in LabelsNum ])
parser.add_argument("-m", nargs="?", type=str, default="vgg16", choices=[ e.value for e in PretrainedModel ])
parser.add_argument("-c", nargs="?", type=str, default="fcn", choices=[ e.value for e in ClassifyModel ])
parse_args = parser.parse_args()

dataset = DumpwarePreparation(
    # data_dir=[
    #     '/content/4096/300/TRAIN/',
    #     '/content/4096/300/TEST/'
    # ],
    labels_num=parse_args.n,
    model_name=parse_args.m
)
x_train, x_test, y_train, y_test = dataset.prepare_dumpware10_for_category()
dataset.summary()

model = PlainModel(
    x_train=x_train,
    y_train=y_train,
    x_test=x_test,
    convolutional_model=parse_args.m,
    classify_func=parse_args.c
)
y_pred = model.flow_execute()
print(y_pred.shape)
raise Exception("DD"*20)
output_metrix_from_matrix(y_test=y_test, y_pred=y_pred, labels_num=11)
