import lime
import glob
import numpy as np
import tensorflow as tf
from skimage.segmentation import mark_boundaries
from sklearn.model_selection import train_test_split

import matplotlib.pyplot as plt
# try:
#   import lime
# except:
#   import sys
#   sys.path.append(os.path.join('..', '..'))
#   import lime

CATEGORY_LABELS = ["Adposhel", "Allaple", "Amonetize", "AutoRun", "BrowseFox", "Dinwod", "InstallCore", "MultiPlug", "Other", "VBA", "Vilsel"]
data_dir = [
    '/content/4096/300/TRAIN/',
    '/content/4096/300/TEST/'
]

temp_x = []
temp_y = []

for dir_path in data_dir:
    for label_num, label in enumerate(CATEGORY_LABELS):
        label_dir_path = dir_path + label
        png_paths = glob.glob(label_dir_path + "/*.png")

        for png_path in png_paths:
            png = tf.keras.preprocessing.image.load_img(
                path=png_path,
                color_mode='rgb',
                target_size=(256, 256),
                interpolation='bicubic'
            )
            png = tf.keras.preprocessing.image.img_to_array(png)
            png = tf.keras.applications.vgg16.preprocess_input(png)

            temp_x.append(png)
            temp_y.append(label_num)

temp_x = np.array(temp_x) / 255
temp_y = np.array(temp_y)

x_train, x_test, y_train, y_test = \
train_test_split(temp_x, temp_y, test_size=0.2, shuffle=True)

del temp_x, temp_y

base_model = tf.keras.applications.VGG16(
    weights='imagenet',
    include_top=False,
    input_shape=(256, 256, 3)
)
base_model.trainable=False

model = tf.keras.models.Sequential()
model.add(base_model)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(11, activation='softmax'))
model.summary()

model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',
    metrics=['accuracy']
)

model.fit(
    x=x_train,
    y=y_train,
    batch_size=32,
    epochs=5,
    # epochs=50,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)
    ],
    verbose='auto'
)

print(
"""
Top-5 Predictions
"""
)
print(x_test[0].shape)
preds = model.predict(x_test[0])
print(x_test[0].shape)
print(preds.shape)
idx = np.argsort(preds, axis=1)
sorted_idx = idx[0][::-1]
for i in range(5):
  k = sorted_idx[i]
  prediction = format(float(preds[0][k]), '.10f')
  print(f"({k}){CATEGORY_LABELS[k]:12}\t{prediction}")
print()

print(
"""
LIME
"""
)
explainer = lime.lime_image.LimeImageExplainer()

# Hide color is the color for a superpixel turned OFF.
# Alternatively, if it is NONE, the superpixel wil be replaced by the average of itspixels
explanation = explainer.explain_instance(
    image=x_test[0].astype('double'),
    classifier_fn=model.predict,
    hide_color=0,
    top_labels=5,
    num_samples=1000
)

plt.figure(tight_layout=True, figsize=(20, 20))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[0], positive_only=False, num_features=200, hide_rest=False)
plt.subplot(151)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[1], positive_only=False, num_features=200, hide_rest=False)
plt.subplot(152)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[2], positive_only=False, num_features=200, hide_rest=False)
plt.subplot(153)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[3], positive_only=False, num_features=200, hide_rest=False)
plt.subplot(154)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[4], positive_only=False, num_features=200, hide_rest=False)
plt.subplot(155)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

# Positive-only and Negative-only
plt.figure(tight_layout=True, figsize=(8, 8))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[0], positive_only=True, num_features=200, hide_rest=True)
plt.subplot(121)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))

temp, mask = explanation.get_image_and_mask(explanation.top_labels[0], positive_only=False, negative_only=True, num_features=200, hide_rest=True)
plt.subplot(122)
plt.imshow(mark_boundaries(temp / 2 + 0.5, mask))
