import glob
import numpy as np
import tensorflow as tf
from matplotlib import pyplot as plt
from sklearn.manifold import TSNE
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split

%matplotlib inline

COLORS = np.array([
    "red", "blue", "yellow", "pink", "orange", "purple",
    "black", "brown", "gray", "cyan", "magenta"
])
CATEGORY_LABELS = ["Adposhel", "Allaple", "Amonetize", "AutoRun", "BrowseFox", "Dinwod", "InstallCore", "MultiPlug", "Other", "VBA", "Vilsel"]
DATA_DIR = [
    '/content/4096/300/TRAIN/',
    '/content/4096/300/TEST/'
]

temp_x = []
temp_y = []

for dir_path in DATA_DIR:
    for label_num, label in enumerate(CATEGORY_LABELS):
        label_dir_path = dir_path + label
        png_paths = glob.glob(label_dir_path + "/*.png")

        for png_path in png_paths:
            png = tf.keras.preprocessing.image.load_img(
                path=png_path,
                color_mode='rgb',
                target_size=(256, 256),
                interpolation='bicubic'
            )
            png = tf.keras.preprocessing.image.img_to_array(png)
            png = tf.keras.applications.vgg16.preprocess_input(png)

            temp_x.append(png)
            temp_y.append(label_num)

temp_x = np.array(temp_x) / 255
temp_y = np.array(temp_y)

x_train, x_test, y_train, y_test = \
train_test_split(temp_x, temp_y, test_size=0.2, shuffle=True)

del temp_x, temp_y

base_model = tf.keras.applications.VGG16(
    weights='imagenet',
    include_top=False,
    input_shape=(256, 256, 3)
)
base_model.trainable=False

bn_train = base_model.predict(x_train)
bn_train = bn_train.reshape(bn_train.shape[0], -1)

print(
'''
t-SNE
'''
)
def color_plots(tx, ty):
    for idx, color in enumerate(COLORS):
        indices = [i for i, l in enumerate(y_train) if idx == l]
        current_tx = np.take(tx, indices)
        current_ty = np.take(ty, indices)
        plt.scatter(current_tx, current_ty, c=color, label=CATEGORY_LABELS[idx])
    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0)
    plt.show()

tsne = TSNE(
    n_components=2,
    random_state=4,
    perplexity=30
)
tsne = tsne.fit_transform(bn_train)
print(tsne.shape)
color_plots(tsne[:,0], tsne[:,1])

input("Enter means to execute t-SNE + PCA flow: ")
print(
'''
t-SNE + PCA
'''
)
pca = PCA(
    n_components=50,
    random_state=4
)
pca = pca.fit_transform(bn_train)
print(pca.shape)

del tsne
tsne = TSNE(
    n_components=2,
    random_state=4,
    perplexity=30
)
tsne = tsne.fit_transform(pca)
print(tsne.shape)
color_plots(tsne[:,0], tsne[:,1])
