import numpy as np
import tensorflow as tf
from model.basic import BasicModel
from sklearn.metrics import classification_report
from module.schema import PretrainedModel, ClassifyModel, CaseLabel


def vgg16_implemented(model) -> tf.keras.models.Model:
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        # if "block1_pool" == layer.name:
        if "block2_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def vgg19_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def resnet_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def densenet_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def xception_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


def inception_implemented(model):
    for i, layer in enumerate(model.layers):
        if i == 0:
            input = layer.input
            x = input
            continue
        
        if "block1_pool" == layer.name:
            x = layer(x)
            break
            
        x = layer(x)

    return tf.keras.models.Model(input, x)


class BottleNeck(BasicModel):
    def __init__(
        self,
        x_train,
        y_train,
        x_test,
        y_test,
        convolutional_model: PretrainedModel = PretrainedModel.VGG16,
        classify_func: ClassifyModel = ClassifyModel.FCN,
        problem_case: CaseLabel = CaseLabel.CATEGORY
    ):
        super().__init__(
            x_train, y_train, x_test,
            convolutional_model,
            classify_func,
            problem_case,
        )
        self.y_test=y_test


    def make_train_bn_features(self, model):
        n, _, _, _ = self.x_train.shape
        _, h, w, d = model.output.shape
        print(n, h, w, d)
        bf_train = np.zeros(shape=(n, h, w, d))
        for i in range(n):
            features_batch = tf.expand_dims(self.x_train[i], axis=0)
            bf_train[i] = model.predict(features_batch, verbose=0)

        print("bf_train", bf_train.shape)
        bf_train = bf_train.reshape(bf_train.shape[0], -1)
        print("bf_train", bf_train.shape)

        return bf_train


    def make_test_bn_features(self, model):
        n, _, _, _ = self.x_test.shape
        _, h, w, d = model.output.shape
        print(n, h, w, d)
        bf_test = np.zeros(shape=(n, h, w, d))
        for i in range(n):
            features_batch = tf.expand_dims(self.x_test[i], axis=0)
            bf_test[i] = model.predict(features_batch, verbose=0)

        print("bf_test", bf_test.shape)
        bf_test = bf_test.reshape(bf_test.shape[0], -1)
        print("bf_test", bf_test.shape)

        return bf_test


    def transfer_flow(self):
        conv_base = self.choose_convolutional_model()

        if self.convolutional_model == "vgg16":
            model = vgg16_implemented(conv_base)
        elif self.convolutional_model == "vgg19":
            model = vgg19_implemented(conv_base)
        elif self.convolutional_model == "resnet152":
            model = resnet_implemented(conv_base)
        elif self.convolutional_model == "densenet201":
            model = densenet_implemented(conv_base)
        elif self.convolutional_model == "xception":
            model = xception_implemented(conv_base)
        elif self.convolutional_model == "inception_v3":
            model = inception_implemented(conv_base)
        else:
            raise NotImplementedError

        model.summary()

        clf = self.choose_ml_classifier()
    
        bf_train = self.make_train_bn_features(model)
        clf.fit(bf_train, self.y_train)
        del bf_train
    
        bf_test = self.make_test_bn_features(model)
        pred = clf.predict(bf_test)
        del bf_test, clf
    
        print(classification_report(
            self.y_test,
            pred,
            target_names=['Benign', 'Malware'],
            digits=4
        ))
    
        del model, pred

        # bf_train = model.predict(self.x_train)
        # bf_train = bf_train.reshape(bf_train.shape[0], -1)
        # bf_test = model.predict(self.x_test)
        # bf_test = bf_test.reshape(bf_test.shape[0], -1)
        # print("\nBottleneck Features:\nbf_train: {}\nbf_test: {}\n".format(bf_train.shape, bf_test.shape))

        # for clf_name in ["svm", "svc", "rf", "knn", "j48", "xgboost"]:
        #     self.classify_func = clf_name
        #     clf = self.choose_ml_classifier()
        #
        #     bf_train = self.make_train_bn_features(model)
        #     clf.fit(bf_train, self.y_train)
        #     del bf_train
        #
        #     bf_test = self.make_test_bn_features(model)
        #     pred = clf.predict(bf_test)
        #     del bf_test, clf
        #
        #     print(classification_report(
        #         self.y_test,
        #         pred,
        #         target_names=['Benign', 'Malware'],
        #         digits=4
        #     ))
        #
        #     del pred

