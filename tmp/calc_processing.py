import gc
import time
import glob
import numpy as np
import tensorflow as tf
from typing import Tuple

CATEGORY_LABELS = [
    "Adposhel", "Allaple", "Amonetize", "AutoRun",
    "BrowseFox", "Dinwod", "InstallCore", "MultiPlug",
    "Other", "VBA", "Vilsel"
]

def dataset_preparation(size: int = 300) -> Tuple[np.ndarray, np.ndarray]:
    x_train = []
    y_train = []

    for label_num, label in enumerate(CATEGORY_LABELS):
        label_dir_path = "../4096/300/TEST/" + label
        png_paths = glob.glob(label_dir_path + "/*.png")

        for png_path in png_paths:
            png = tf.keras.preprocessing.image.load_img(
                path=png_path,
                color_mode='rgb',
                target_size=(size, size),
                interpolation='bicubic'
            )
            png = tf.keras.preprocessing.image.img_to_array(png)
            png = tf.keras.applications.vgg16.preprocess_input(png)

            x_train.append(png)
            y_train.append(label_num)

    x_train = np.array(x_train) / 255
    y_train = np.array(y_train)

    return x_train, y_train


def print_processing(process_time: float) -> None:
    print(
        "process_time:",
        f"   => {process_time}[s] / 100 images",
        "    => {}[s] / 1 image".format(process_time/100.0),
        sep="\n"
    )


def calculate_processing(model: tf.keras.models.Model, image_size: int = 300) -> None:
    x_train, _ = dataset_preparation(image_size)
    gc.collect()
    gc.disable()
    start = time.perf_counter()
    model.predict(x_train[:100], batch_size=1)
    process_time = time.perf_counter() - start
    print_processing(process_time)
    gc.enable()
    del x_train


if __name__ == "__main__":
    print("--- No.1 ---")
    model = tf.keras.models.load_model("./vgg16-cbam-cost_sensitive-1.h5")
    calculate_processing(model)
    del model

    print("--- No.2 ---")
    model = tf.keras.applications.VGG16(include_top=True)
    calculate_processing(model, 224)
    del model

    print("--- No.3 ---")
    model = tf.keras.applications.EfficientNetB0(include_top=True)
    calculate_processing(model, 224)
    del model
