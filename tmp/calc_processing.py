import gc
import time
import glob
import numpy as np
import tensorflow as tf
from typing import Tuple

CATEGORY_LABELS = [
    "Adposhel", "Allaple", "Amonetize", "AutoRun",
    "BrowseFox", "Dinwod", "InstallCore", "MultiPlug",
    "Other", "VBA", "Vilsel"
]

def dataset_preparation(size: int = 300) -> Tuple[np.ndarray, np.ndarray]:
    x_train = []
    y_train = []

    for label_num, label in enumerate(CATEGORY_LABELS):
        label_dir_path = "../4096/300/TEST/" + label
        png_paths = glob.glob(label_dir_path + "/*.png")

        for png_path in png_paths:
            png = tf.keras.preprocessing.image.load_img(
                path=png_path,
                color_mode='rgb',
                target_size=(size, size),
                interpolation='bicubic'
            )
            png = tf.keras.preprocessing.image.img_to_array(png)
            png = tf.keras.applications.vgg16.preprocess_input(png)

            x_train.append(png)
            y_train.append(label_num)

    x_train = np.array(x_train) / 255
    y_train = np.array(y_train)

    return x_train, y_train


def print_processing(process_time: float) -> None:
    print(
        "process_time:",
        f"   => {process_time}[s] / 100 images",
        "    => {}[s] / 1 image".format(process_time/100.0),
        sep="\n"
    )


def calculate_processing(model: tf.keras.models.Model, image_size: int = 300) -> None:
    x_train, _ = dataset_preparation(image_size)
    gc.collect()
    gc.disable()
    start = time.perf_counter()
    model.predict(x_train[:100], batch_size=1)
    process_time = time.perf_counter() - start
    print_processing(process_time)
    gc.enable()
    del x_train


if __name__ == "__main__":
    # print("--- No.1 ---")
    # model = tf.keras.models.load_model("./vgg16-cbam-cost_sensitive-1.h5")
    # calculate_processing(model)
    # del model

    # print("--- No.2 ---")
    # model = tf.keras.applications.VGG16(include_top=True)
    # calculate_processing(model, 224)
    # del model
    # => 7.496383068000114[s] / 100 images
    # => 0.07496383068000113[s] / 1 image

    # print("--- No.3 ---")
    # model = tf.keras.applications.EfficientNetB3(include_top=True)
    # calculate_processing(model)
    # del model
    # => 5.047213509999892[s] / 100 images
    # => 0.05047213509999892[s] / 1 image

    # print("--- No.4 ---")
    # calculate_processing(model, 224)
    # del model
    # => 3.4632815260001735[s] / 100 images
    # => 0.03463281526000173[s] / 1 image

    # print("--- No.5 ---")
    # base_model = tf.keras.applications.DenseNet121(
    #     weights="imagenet",
    #     include_top=False,
    #     input_shape=(300, 300, 3),
    # )
    # model = tf.keras.models.Sequential()
    # model.add(base_model)
    # model.add(tf.keras.layers.Flatten())
    # model.add(tf.keras.layers.Dense(1024, activation='relu'))
    # model.add(tf.keras.layers.BatchNormalization())
    # model.add(tf.keras.layers.Dropout(0.3))
    # model.add(tf.keras.layers.Dense(512, activation='relu'))
    # model.add(tf.keras.layers.BatchNormalization())
    # model.add(tf.keras.layers.Dropout(0.2))
    # model.add(tf.keras.layers.Dense(11, activation='softmax'))
    # calculate_processing(model)
    # del model, base_model
    # => 6.731720064000001[s] / 100 images
    # => 0.06731720064[s] / 1 image

    # print("--- No.6 ---")
    # base_model = tf.keras.applications.EfficientNetB3(
    #     weights="imagenet",
    #     include_top=False,
    #     input_shape=(300, 300, 3),
    # )
    # model = tf.keras.models.Sequential()
    # model.add(base_model)
    # model.add(tf.keras.layers.GlobalAveragePooling2D())
    # model.add(tf.keras.layers.Dense(11, activation='softmax'))
    # calculate_processing(model)
    # del model
    # => 5.18785580299982[s] / 100 images
    # => 0.051878558029998204[s] / 1 image

    # print("--- No.7 ---")
    # base_model = tf.keras.applications.EfficientNetB0(
    #     weights="imagenet",
    #     include_top=False,
    #     input_shape=(224, 224, 3),
    # )
    # model = tf.keras.models.Sequential()
    # model.add(base_model)
    # model.add(tf.keras.layers.GlobalAveragePooling2D())
    # model.add(tf.keras.layers.Dense(2, activation='softmax'))
    # calculate_processing(model, 224)
    # del model, base_model
    # => 2.34751815999698[s] / 100 images
    # => 0.0234751815999698[s] / 1 image

    # print("--- No.8 ---")
    # base_model = tf.keras.applications.DenseNet121(
    #     weights="imagenet",
    #     include_top=False,
    #     input_shape=(224, 224, 3),
    # )
    # model = tf.keras.models.Sequential()
    # model.add(base_model)
    # model.add(tf.keras.layers.GlobalAveragePooling2D())
    # model.add(tf.keras.layers.Dense(2, activation='softmax'))
    # calculate_processing(model, 224)
    # del model, base_model
    # => 3.719924051001726[s] / 100 images
    # => 0.03719924051001726[s] / 1 image

    # print("--- No.9 ---")
    # base_model = tf.keras.applications.DenseNet121(
    #     weights="imagenet",
    #     include_top=False,
    #     input_shape=(224, 224, 3),
    # )
    # model = tf.keras.models.Sequential()
    # model.add(base_model)
    # model.add(tf.keras.layers.Flatten())
    # model.add(tf.keras.layers.Dense(1024, activation='relu'))
    # model.add(tf.keras.layers.BatchNormalization())
    # model.add(tf.keras.layers.Dropout(0.3))
    # model.add(tf.keras.layers.Dense(512, activation='relu'))
    # model.add(tf.keras.layers.BatchNormalization())
    # model.add(tf.keras.layers.Dropout(0.2))
    # model.add(tf.keras.layers.Dense(2, activation='softmax'))
    # calculate_processing(model, 224)
    # del model, base_model
    # => 4.98765607599853[s] / 100 images
    # => 0.0498765607599853[s] / 1 image
