import glob
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.svm import SVC
from sklearn.metrics import classification_report

def count_b_and_m(y_train):
    positive = np.count_nonzero(y_train)
    negative = len(y_train) - positive
    print(f"train:\n\tBenign: {negative}\n\tMalware: {positive}")
    positive = np.count_nonzero(y_test)
    negative = len(y_test) - positive
    print(f"test:\n\tBenign: {negative}\n\tMalware: {positive}")

def preprocess_func(model_name):
    if model_name == "vgg16":
        return tf.keras.applications.vgg16.preprocess_input
    elif model_name == "vgg19":
        return tf.keras.applications.vgg19.preprocess_input
    elif model_name == "resnet152":
        return tf.keras.applications.resnet50.preprocess_input
    elif model_name == "densenet201":
        return tf.keras.applications.densenet.preprocess_input
    elif model_name == "xception":
        return tf.keras.applications.xception.preprocess_input
    elif model_name == "inception_v3":
        return tf.keras.applications.inception_v3.preprocess_input
    elif "mobilenet_v3" in model_name:
        return tf.keras.applications.mobilenet_v3.preprocess_input
    elif "efficientnet" in model_name:
        return  tf.keras.applications.efficientnet.preprocess_input

    return lambda x: x


data_dir = [
    '../4096/300/TRAIN/',
    '../4096/300/TEST/'
]

CATEGORY_LABELS = [
    "Adposhel", "Allaple", "Amonetize", "AutoRun",
    "BrowseFox", "Dinwod", "InstallCore", "MultiPlug",
    "Other", "VBA", "Vilsel"
]
UNKNOWN_MALWARE_LABELS = [
    ["MultiPlug", "VBA", "Vilsel"],
    ["BrowseFox", "Dinwod", "InstallCore"],
    ["Adposhel", "Allaple", "Amonetize"]
]


try:
    raise Exception()
    print("Try Loading")
    bf_train = np.load('train.npy')
    bf_test = np.load('test.npy')
    y_train = np.load('train_y.npy')
    y_test = np.load('test_y.npy')
    print(
        f"bf_train: {bf_train.shape}",
        f"y_train: {y_train.shape}",
        f"bf_test: {bf_test.shape}",
        f"y_test: {y_test.shape}",
        sep='\n'
    )
    count_b_and_m(y_train)

except:
    print("Try Making")
    temp_mx = []
    temp_my = []
    temp_bx = []
    temp_by = []
    temp_ux = []
    temp_uy = []

    fold=1  # fold=1,2,3
    UNKNOWS = UNKNOWN_MALWARE_LABELS[fold-1]

    for dir_path in data_dir:
        for label in CATEGORY_LABELS:
            label_dir_path = dir_path + label
            png_paths = glob.glob(label_dir_path + "/*.png")

            for png_path in png_paths:
                png = tf.keras.preprocessing.image.load_img(
                    path=png_path,
                    color_mode='rgb',
                    interpolation='bicubic'
                )
                png = tf.keras.preprocessing.image.img_to_array(png)
                png = preprocess_func("VGG16")(png)

                if label == "Other":
                    temp_bx.append(png)
                    temp_by.append(0)
                elif label in UNKNOWS:
                    temp_ux.append(png)
                    temp_uy.append(1)
                else:
                    temp_mx.append(png)
                    temp_my.append(1)

    temp_bx = np.array(temp_bx) / 255
    temp_by = np.array(temp_by)
    temp_ux = np.array(temp_ux) / 255
    temp_uy = np.array(temp_uy)
    temp_mx = np.array(temp_mx) / 255
    temp_my = np.array(temp_my)

    train_bx, test_bx, train_by, test_by = \
    train_test_split(
        temp_bx, temp_by,
        train_size=(len(temp_my)/3686),
        test_size=(len(temp_uy)/3686),
        shuffle=True
    )
    del temp_bx, temp_by

    x_train = np.concatenate([train_bx, temp_mx])
    x_test = np.concatenate([test_bx, temp_ux])
    y_train = np.concatenate([train_by, temp_my])
    y_test = np.concatenate([test_by, temp_uy])

    del temp_mx, temp_ux, temp_my, temp_uy, \
        train_bx, test_bx, train_by, test_by

    print(
        x_train.shape,
        x_test.shape,
        y_train.shape,
        y_test.shape,
        sep='\n'
    )

    count_b_and_m(y_train)

    _, h, w, d = x_train.shape
    base_model = tf.keras.applications.VGG16(
        weights='imagenet',
        include_top=False,
        input_shape=(h, w, d)
    )
    x = tf.keras.layers.GlobalAveragePooling2D()(base_model.layers[-1].output)
    model = tf.keras.models.Model(base_model.inputs, x)
    model.summary
    
    bf_train = model.predict(x_train)
    bf_test = model.predict(x_test)
    print(
        bf_train.shape,
        bf_test.shape,
        sep='\n'
    )

    bf_train = bf_train.reshape(bf_train.shape[0], -1)
    bf_test = bf_test.reshape(bf_test.shape[0], -1)
    print(
        bf_train.shape,
        bf_test.shape,
        sep='\n'
    )
    exit(0)

    np.save('train', bf_train)
    np.save('test', bf_test)
    np.save('train_y', y_train)
    np.save('test_y', y_test)

    del x_train, x_test

# Pre-Test
clf = SVC(
    kernel="rbf",
    C = 10,
)
clf.fit(bf_train, y_train)
y_pred = clf.predict(bf_test)
print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware'], digits=4))
del clf

# Main-Test
sm = SMOTE(random_state=42)
x_resampled, y_resampled = sm.fit_resample(bf_train, y_train)
del bf_train, y_train
print(x_resampled.shape, y_resampled.shape)
count_b_and_m(y_resampled)


clf = SVC(
    kernel="rbf",
    C = 10,
)
clf.fit(x_resampled, y_resampled)
del x_resampled, y_resampled

y_pred = clf.predict(bf_test)
print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware'], digits=4))
print("End!!")
del bf_test, y_test
